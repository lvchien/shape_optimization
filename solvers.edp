macro SolveStateSystem2D()
{
  if(conf == 1)
  {
    solve Stokes2([u1, u2, p], [v1, v2, q]) =
      int2d(Th)(2 * mu * dot(eps2(u1, u2), eps2(v1, v2)) - p * div2(v1, v2) - q * div2(u1, u2))
      - int2d(Th)(p * q * 1e-8)
      + on(free, u1 = 0., u2 = 0.) 
      + on(dirichlet, u1 = udc1, u2 = udc2);
  }
  else if(conf == 2)
  {
    solve Elastic2([u1, u2], [v1, v2]) =
      int2d(Th)(lambda * div2(u1, u2) * div2(v1, v2) + 2.0 * mu * dot(eps2(u1, u2), eps2(v1, v2))) 
      - int1d(Th, neumann)(g1 * v1 + g2 * v2)
      + on(dirichlet, u1 = 0., u2 = 0.);
  }
} //EOM

macro SolveStateSystem3D()
{
  if(conf == 1)
  {
    solve Stokes3([u1, u2, u3, p], [v1, v2, v3, q]) =
      int3d(Th)(2 * mu * dot(eps3(u1, u2), eps3(v1, v2, v3)) - p * div3(v1, v2, v3) - q * div3(u1, u2, u3))
      - int3d(Th)(p * q * 1e-8)
      + on(free, u1 = 0., u2 = 0., u3 = 0.) 
      + on(dirichlet, u1 = udc1, u2 = udc2, u3 = udc3);
  }
  else if(conf == 2)
  {
    solve Elastic3([u1, u2, u3], [v1, v2, v3]) =
      int3d(Th)(lambda * div3(u1, u2, u3) * div3(v1, v2, v3) + 2.0 * mu * dot(eps3(u1, u2, u3), eps3(v1, v2, v3))) 
      - int2d(Th, neumann)(g1 * v1 + g2 * v2 + g3 * v3)
      + on(dirichlet, u1 = 0., u2 = 0., u3 = 0.);
  }
} //EOM

macro SolveAdjointSystem2D() 
{
  if(conf == 1)
  {
    solve StokesAdjoint2([w1, w2, qq], [v1, v2, q]) =
      int2d(Th)(2 * mu * dot(eps2(w1, w2), eps2(v1, v2)) - qq * div2(v1, v2) - q * div2(w1, w2))
      - int2d(Th)(4 * mu * dot(eps2(u1, u2), eps2(v1, v2)))
      - int2d(Th)(qq * q * 1e-8)
      + on(dirichlet, free, w1 = 0., w2 = 0.);
  }
  else if(conf == 2)
  {
    ;
  }
}//EOM

macro SolveAdjointSystem3D() 
{
  if(conf == 1)
  {
    solve StokesAdjoint3([w1, w2, w3, qq], [v1, v2, v3, q]) =
      int3d(Th)(2 * mu * dot(eps3(w1, w2, w3), eps3(v1, v2, v3)) - qq * div3(v1, v2, v3) - q * div3(w1, w2, w3))
      - int3d(Th)(4 * mu * dot(eps3(u1, u2, u3), eps3(v1, v2, v3)))
      - int3d(Th)(qq * q * 1e-8)
      + on(dirichlet, free, w1 = 0., w2 = 0., w3 = 0.);
  }
  else if(conf == 2)
  {
    ;
  }
}//EOM

/* dL: Derivative of Lagrange (objective) function */
macro SolveRegEx2D() 
{
  if(regex == 0)
  {
    solve Elliptic2([tta1, tta2], [eta1, eta2]) =
      int2d(Th)(gm * dot(eps2(tta1, tta2), eps2(eta1, eta2)))
      + int2d(Th)(dot([tta1, tta2], [eta1, eta2]))
      + int1d(Th, free)(dL * dot([eta1, eta2], N2))
      + on(dirichlet, neumann, tta1 = 0., tta2 = 0.);
  }
  else if(regex == 1)
  {
    solve LaplaceBeltrami2([tta1, tta2], [eta1, eta2]) =
      int2d(Th)(gm * dot(eps2(tta1, tta2), eps2(eta1, eta2)))
      + int1d(Th, free)((1 - gm) * (dot(tgrad2(tta1), tgrad2(eta1)) + dot(tgrad2(tta2), tgrad2(eta2))))
      + int1d(Th, free)(dL * dot([eta1, eta2], N2))
      + on(dirichlet, neumann, tta1 = 0., tta2 = 0.);
  }
} //EOM

macro SolveRegEx3D() 
{
  if(regex == 0)
  {
    solve Elliptic3([tta1, tta2, tta3], [eta1, eta2, eta3]) =
      int3d(Th)(gm * dot(eps3(tta1, tta2, tta3), eps3(eta1, eta2, eta3)))
      + int3d(Th)(dot([tta, tta2, tta3], [eta1, eta2, eta3]))
      + int2d(Th, free)(dL * dot([eta1, eta2, eta3], N3))
      + on(dirichlet, neumann, tta1 = 0., tta2 = 0., tta3 = 0.);
  }
  else if(regex == 1)
  {
    solve LaplaceBeltrami3([tta1, tta2, tta3], [eta1, eta2, eta3]) =
      int3d(Th)(gm * dot(eps3(tta1, tta2, tta3), eps3(eta1, eta2, eta3)))
      + int2d(Th, free)((1 - gm) * (dot(tgrad3(tta1), tgrad3(eta1)) + dot(tgrad3(tta2), tgrad3(eta2)) + dot(tgrad3(tta3), tgrad3(eta3))))
      + int2d(Th, free)(dL * dot([eta1, eta2, eta3], N3))
      + on(dirichlet, neumann, tta1 = 0., tta2 = 0., tta3 = 0.);
  }
} //EOM