load "medit"
include "getARGV.idp"
include "operators.edp"


/* Label of borders */
int FREE = 1;                                                               // Free boundary
int FWALL = 11;                                                             // Homogeneous Dirichlet boundary of fluid domain
int FIN = 12;                                                               // Non-homogeneous Dirichlet boundary of fluid domain
int FOUT = 13;                                                              // Neumann boundary of fluid domain
int SWALL = 21;                                                             // Homogeneous Dirichlet boundary of solid domain
int SLOAD = 22;                                                             // Neumann boundary of solid domain


/* Constants */
real epsilon = 1e-8;

/*----------------------------------- Problem configurations -----------------------------------*/
int case = getARGV("--case", 1);                                            // Test case
real nu = getARGV("--nu", 0.005);                                           // The kinematic viscosity coefficient of fluid
real E = getARGV("--E", 1.0);                                               // The Young modulus of solid
real nus = getARGV("--nus", 0.3);                                           // The Poisson ratio of solid
real cr = getARGV("--cr", 1.) ;                                             // Ratio of constraint volume: convol = cr * vol0
real w = getARGV("--w", 0.5);                                               // Weight parameter of the objective function                                                                   
/*----------------------------------------------------------------------------------------------*/

/*---------------------------------- Numerical configurations ----------------------------------*/                                                                
real b0 = getARGV("--b0", 1e-2);                                            // Initial value of b
real bmax = getARGV("--bmax", 1e1);                                         // Maximal value of b, no longer update if b > bmax
real l0 = getARGV("--l0", 0);                                               // Initial value of l
real gm = getARGV("--gm", 0.01);                                            // Regularization parameter 
real tau0 = getARGV("--tau", 1e-2);                                         // Initial descent step length
real beta = getARGV("--beta", 0.7);                                         // Update step length 
real sm = getARGV("--sm", 1e-4);                                            // Armijo condition's coefficient
real alpha = getARGV("--alpha", 1.05);                                      // Update coefficient of b: b_{n+1} = alpha*b_n
real errc = getARGV("--errc", 1e-2);                                        // Value for the stopping criterion
real minarea = getARGV("--minarea", 1e-6);                                  // Remesh parameter: remesh if any element has an area less than minarea
real mshsize = getARGV("--mshsize", 0.03);                                  // Required edge size when remeshing : hmax = mshsize, hmin = mshsize/sqrt(2)
/*--------------------------------------------------------------------------------------------*/


/*------------------------------------ IO configurations -------------------------------------*/
string fmsh = getARGV("--meshname", "fluid");                               // File name of fluid domain's mesh
string smsh = getARGV("--meshname", "solid");                               // File name of solid domain's mesh
string folder = getARGV("--folder", "/");                                   // folder contains output
int steps= getARGV("--steps", 3);                                           // number of steps to save results once
/*--------------------------------------------------------------------------------------------*/


/* Variables */
real mu = E/(2 * (1 + nus));
real lambda = E * nus/((1 + nus) * (1 - 2 * nus));
real l = l0;
real b = b0;
real J0, vol0, convol;


/* Load mesh */
mesh Fh = readmesh("meshes/FSI/" + fmsh + ".mesh");
mesh Sh = readmesh("meshes/FSI/" + smsh + ".mesh");
cout << "Done load meshes!" << endl;

/* Declare FE spaces */
fespace FVh(Fh, P2);
fespace FPh(Fh, P1);
fespace SUh(Sh, P1);


/* Declare FE variables */
FVh v1, v2, va1, va2, vt1, vt2, ff1, ff2, vin1, vin2, vw1, vw2, vout1, vout2, df1, df2, dft1, dft2;
FPh p, pa, pt;
SUh u1, u2, ua1, ua2, ut1, ut2, fs1, fs2, uload1, uload2, ds1, ds2, dst1, dst2;


/* Set initial values for each test case */
if(case == 1)
{
    ff1 = 0.0; ff2 = 0.0;
    vin1 = y * (0.5 - y); vin2 = 0.0;
    vout1 = 0.0; vout2 = 0.0;

    fs1 = 0.0; fs2 = 0.0;
}
// TODO: continue

/*-------------------------- Declare functions and their derivatives --------------------------*/
macro compliance() (int2d(Sh)(2.0 * mu * dot(eps2(u1, u2), eps2(u1, u2)) + lambda * div2(u1, u2) * div2(u1, u2))) //EOM
macro dissipatedenergy() (int2d(Fh)(2 * nu * dot(eps2(v1, v2), eps2(v1, v2)))) //EOM
macro J() (w * compliance + (1 - w) * dissipatedenergy) //EOM
macro dJ() (w * (2.0 * mu * dot(eps2(u1, u2), eps2(u1, u2)) + lambda * div2(u1, u2) * div2(u1, u2))
            + 2 * (1 - w) * nu * dot(eps2(v1, v2), eps2(v1, v2))
            - (fs1 * ua1 + fs2 * ua2) + (ff1 * va1 + ff2 * va2)
            + 2.0 * mu * dot(eps2(u1, u2), eps2(ua1, ua2)) + lambda * div2(u1, u2) * div2(ua1, ua2)
            - 2.0 * nu * dot(eps2(v1, v2), eps2(ua1, ua2)) + p * div2(ua1, ua2)
            + 2.0 * nu * dot(eps2(v1, v2), eps2(va1, va2))) //EOM

macro vol2(Th) (int2d(Th)(1.)) //EOM
macro dvol() (1.0) //EOM

macro L() (J/J0 - l * (vol2(Sh) - convol)/vol0 + b/2.0 * ((vol2(Sh) - convol) ^ 2)/(vol0 ^ 2)) //EOM 
macro dL() (dJ/J0 - l * dvol/vol0 + b * dvol * (vol2(Sh) - convol)/(vol0 ^ 2)) //EOM
/*---------------------------------------------------------------------------------------------*/


/*-------------------------------- Declare variational problems --------------------------------*/
problem stokes2D([v1, v2, p], [vt1, vt2, pt]) = 
    int2d(Fh)(2.0 * nu * dot(eps2(v1, v2), eps2(vt1, vt2)) - p * div2(vt1, vt2) - pt * div2(v1, v2))
        - int2d(Fh)(ff1 * vt1 + ff2 * vt2)
        - int2d(Fh)(p * pt * epsilon)
        - int1d(Fh, FOUT)(vout1 * vt1 + vout2 * vt2)
        + on(FIN, v1 = vin1, v2 = vin2)
        + on(FWALL, FREE, v1 = 0.0, v2 = 0.0);

problem elastic2D([u1, u2], [ut1, ut2]) = 
    int2d(Sh)(2.0 * mu * dot(eps2(u1, u2), eps2(ut1, ut2)) + lambda * div2(u1, u2) * div2(ut1, ut2))
        - int2d(Sh)(fs1 * ut1 + fs2 * ut2)
        - int1d(Sh, SLOAD)(uload1 * ut1 + uload2 * ut2)
        - int1d(Sh, FREE)(((2 * nu * dx(v1) - p) * N.x + nu * (dy(v1) + dx(v2)) * N.y) * ut1 + (nu * (dy(v1) + dx(v2)) * N.x + (2 * nu * dy(v2) - p) * N.y) * ut2)
        + on(SWALL, u1 = 0.0, u2 = 0.0);

problem adjointelastic2D([ua1, ua2], [ut1, ut2]) = 
    int2d(Sh)(2.0 * mu * dot(eps2(ua1, ua2), eps2(ut1, ut2)) + lambda * div2(ua1, ua2) * div2(ut1, ut2))
        + int2d(Sh)(2 * w * (2.0 * mu * dot(eps2(u1, u2), eps2(ut1, ut2)) + lambda * div2(u1, u2) * div2(ut1, ut2)))
        + on(SWALL, ua1 = 0.0, ua2 = 0.0);

problem adjointstokes2D([va1, va2, pa], [vt1, vt2, pt]) = 
    int2d(Fh)(2.0 * nu * dot(eps2(va1, va2), eps2(vt1, vt2)) - pa * div2(vt1, vt2) - pt * div2(va1, va2))
        + int2d(Fh)(4.0 * (1 - w) * nu * dot(eps2(v1, v2), eps2(vt1, vt2)))
        - int2d(Fh)(pa * pt * epsilon)
        + on(FWALL, FIN, va1 = 0.0, va2 = 0.0)
        + on(FREE, va1 = ua1, va2 = ua2);

problem solidelliptic2D([ds1, ds2], [dst1, dst2]) = 
    int2d(Sh)(gm * dot(Jaco2(ds1, ds2), Jaco2(dst1, dst2)))
        + int2d(Sh)(dot([ds1, ds2], [dst1, dst2]))
        + int1d(Sh, FREE)(dL * dot([dst1, dst2], N2))
        + on(SLOAD, SWALL, ds1 = 0.0, ds2 = 0.0);

problem fluidelliptic2D([df1, df2], [dft1, dft2]) = 
    int2d(Fh)(gm * dot(Jaco2(df1, df2), Jaco2(dft1, dft2)))
        + int2d(Fh)(dot([df1, df2], [dft1, dft2]))
        + on(FREE, df1 = ds1, df2 = ds2)
        // + int1d(Sh, FREE)(dL * dot([dft1, dft2], N2))
        + on(FIN, FWALL, FOUT, df1 = 0.0, df2 = 0.0);

macro solvestate()
{
    stokes2D;
    elastic2D;
} //EOM

macro solveadjoint()
{
    adjointelastic2D;
    adjointstokes2D;
} //EOM

macro solveregex()
{
    solidelliptic2D;
    fluidelliptic2D;
} //EOM
/*----------------------------------------------------------------------------------------------*/

/*----------------------------------------- Main block -----------------------------------------*/
solvestate;
plot(Fh, Sh, [v1, v2], [u1, u2]);
J0 = J;
vol0 = vol2(Sh);
convol = vol0 * cr;

int MAXLOOP = 2000;

for(int i = 0; i < MAXLOOP; i++)
{
    solvestate;
    solveadjoint;
    solveregex;
    // plot(Fh, Sh, [df1, df2], [ds1, ds2], cmm = "Iteration " + i + "/" + MAXLOOP);
    
    // Fh = adaptmesh(Fh, hmax = mshsize, hmin = mshsize / 2);
    // Sh = adaptmesh(Sh, hmax = mshsize, hmin = mshsize / 2);
    plot(Fh, Sh, cmm = "Iteration " + i + "/" + MAXLOOP);
    
    real tau = tau0;
    real fminarea = checkmovemesh(Fh, [x + tau * df1, y + tau * df2]);
    real sminarea = checkmovemesh(Sh, [x + tau * ds1, y + tau * ds2]);
    // real fminarea = checkmovemesh(Fh, [x + 1e-4, y + 1e-4]);
    // real sminarea = checkmovemesh(Sh, [x + 1e-4, y + 1e-4]);
    cout << "fminarea = " << fminarea << ", sminarea = " << sminarea << endl;


    int count = 0;
    int MAXSTEP = 20;

    while(count < MAXSTEP && !(fminarea >= minarea && sminarea >= minarea))
    {
        cout << "step length = " << tau << endl;
        cout << "fminarea = " << fminarea << ", sminarea = " << sminarea << endl;
        tau *= beta;
        count ++;
        fminarea = checkmovemesh(Fh, [x + tau * df1, y + tau * df2]);
        sminarea = checkmovemesh(Sh, [x + tau * ds1, y + tau * ds2]);
    }

    if(count < MAXSTEP)
    {
        Fh = movemesh(Fh, [x + tau * df1, y + tau * df2]);
        Sh = movemesh(Sh, [x + tau * ds1, y + tau * ds2]);

        solvestate;
        solveadjoint;
        solveregex;
    }
    else
        break;
}
/*----------------------------------------------------------------------------------------------*/

// plot(Fh, Sh, [v1, v2], [u1, u2]);