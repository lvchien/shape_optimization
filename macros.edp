/* identity matrix */
macro I2() [1, 0, 0, 1] //EOM
macro I3() [1, 0, 0, 0, 1, 0, 0, 0, 1] //EOM

/* normal vector */
macro N2() [N.x, N.y] //EOM
mcaro N3() [N.x, N.y, N.z] //EOM

/* transpose of a vector */
macro tr(u) u' //EOM 

/* gradient of a scalar field */
macro grad(u) [dx(u), dy(u)] // EOM                         
macro grad3(u) [dx(u), dy(u), dz(u)] //EOM     

/* Inner product of 2 vectors */
macro dot(u, v) (tr(u) * v) //EOM

/* divergence of a vector field */
macro div(u1, u2) (dx(u1) + dy(u2)) // EOM                  
macro div3(u1, u2, u3) (dx(u1) + dy(u2) + dz(u3)) //EOM

/* strain tensor */
macro eps2(u1, u2) [dx(u1), 1./2 * (dx(u2) + dy(u1)), 1./2 * (dx(u2) + dy(u1)), dy(u2)] //EOM
macro eps3(u1, u2, u3) [dx(u1), 1./2 * (dx(u2) + dy(u1)), 1./2 * (dx(u3) + dz(u1)), 1./2 * (dx(u2) + dy(u1)), dy(u2), 1./2 * (dy(u3) + dz(u2)), 1./2 * (dx(u3) + dz(u1)), 1./2 * (dy(u3) + dz(u2), dz(u3)] //EOM

/* Hooke's law */
macro aeps2(u1, u2) (2 * mu * eps2(u1, u2) + lambda * div2(u1, u2) * I2) //EOM
macro aeps3(u1, u2, u3) (2 * mu * eps3(u1, u2, u3) + lambda * div3(u1, u2, u3) * I3) //EOM

/* tangential gradient of a vector field */ 
macro tgrad2(u) (grad(u) - grad(u)' * N2 * N2) //EOM                                                    
macro tgrad3(u) (grad(u) - grad(u)' * N3 * N3) //EOM  