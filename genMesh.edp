/* Setting for the label of borders: 
    1 for non-homogeneous Dirichlet boudary, 
    2 for Neumann boundary 
    3 for homogeneous Dirichlet boundary 
    4 for addtional Neumann boudary */

include "getARGV.idp"

int config = getARGV("--config", 1);                    // configuration: 1 for Stokes, 2 for elastic, so on
int testcase = getARGV("--testcase", 1);                // test case
int nn = getARGV("--nn", 10);                           // number of meshing points
string meshname = getARGV("--meshname", "");            // name of mesh file

mesh Th;
system("mkdir " + "meshes");

if (config == 1)
{
    if (testcase == 1)                                                          // pipe test case
    {
        border fr0(t = 0, 1){x = -1 + 1.0/3 * t; y = 0; label = 2;}
        border fr1(t = pi, pi/2){x = 2.0/3 * cos(t); y = 2.0/3 * sin(t); label = 3;}
        border fr2(t = 0, 1){x = 0; y = 2.0/3 + 1.0/3 * t; label = 1;}
        border fr3(t = pi/2, pi){x = cos(t); y = sin(t); label = 3;}

        Th= buildmesh(fr0(nn) + fr1(2 * nn) + fr2(nn) + fr3(2 * nn));
    }
    else if (testcase == 2)                                                     // diffuser test case
    {
        border fr0(t = 0, 1){x = t; y = 1.0/3 * t; label = 3;}
        border fr1(t = 1.0/3, 2.0/3){x = 1; y = t; label = 2;}
        border fr2(t = 1, 0){x = t; y = 1 - 1.0/3 * t; label = 3;}
        border fr3(t = 1, 0){x = 0; y = t; label = 1;}

        Th= buildmesh(fr0(3 * nn) + fr1(nn) + fr2(3 * nn) + fr3(3 * nn));
    }
    else if (testcase == 3)                                                     // double pipe test case
    {
        border fr0(t = 0, 0.375){x = 2 * t; y = t; label = 3;}
        border fr1(t = 0.375, 0.75){x = 2 * t; y = 0.75 - t; label = 3;}
        border fr2(t = 0, 0.25){x = 1.5; y = t; label = 2;}
        border fr3(t = 0.75, 0.5){x = 2 * t; y = 1 - t; label = 3;}
        border fr4(t = 0.5, 0.75){x = 2 * t; y = t; label = 3;}
        border fr5(t = 0.75, 1){x = 1.5; y = t; label = 2;}
        border fr6(t = 0.75, 0.375){x = 2 * t; y = 0.25 + t; label = 3;}
        border fr7(t = 0.375, 0){x = 2 * t; y = 1 - t; label = 3;}
        border fr8(t = 1, 0.75){x = 0; y = t; label = 1;}
        border fr9(t = 0, 0.25){x = 2 * t; y = 0.75 - t; label = 3;}
        border fr10(t = 0.25, 0){x = 2 * t; y = 0.25 + t; label = 3;}
        border fr11(t = 0.25, 0){x = 0; y = t; label = 1;}

        Th= buildmesh(fr0(3 * nn) + fr1(3 * nn) + fr2(nn) + fr3(2 * nn) + fr4(2 * nn) + fr5(nn) 
                    + fr6(3 * nn) + fr7(3 * nn) + fr8(nn) + fr9(2 * nn) + fr10(2 * nn) + fr11(nn));
    }
    else if (testcase == 4)                                                     // obstacle test case
    {
        border fr0(t = -0.75, 0.75){x = t; y = -0.5; label = 1;}
        border fr1(t = -0.5, 0.5){x = 0.75; y = t; label = 2;}
        border fr2(t = 0.75, -0.75){x = t; y = 0.5; label = 1;}
        border fr3(t = 0.5, -0.5){x = -0.75; y = t; label = 1;}
        border fr4(t = 0, 2 * pi){x = 0.1 * sin(t); y = 0.2 * cos(t); label = 3;}

        Th= buildmesh(fr0(3 * nn) + fr1(2 * nn) + fr2(3 * nn) + fr3(2 * nn) + fr4(5 * nn));
    }
    else if (testcase == 5)                                                     // human lung test case
    {
        border fr0(t = 0, 1.05){x = t; y = 1.0/3; label = 3;}
        border fr1(t = -1.0/60, 0){x = 7.0/6 + 7 * t; y = -20 * t; label = 3;}
        border fr2(t = 0, 1.0/9){x = 7.0/6 + t; y = t; label = 1;}
        border fr3(t = 1.0/9, 2.0/9){x = 7.0/6 + t; y = t; label = 3;}
        border fr4(t = 2.0/9, 1.0/3){x = 7.0/6 + t; y = t; label = 1;}
        border fr5(t = 1.0/3, 2.0/3){x = 1.5; y = t; label = 3;}
        border fr6(t = 0, 1.0/9){x = 1.5 - t; y = 2.0/3 + t; label = 1;}
        border fr7(t = 1.0/9, 2.0/9){x = 1.5 - t; y = 2.0/3 + t; label = 3;}
        border fr8(t = 2.0/9, 1.0/3){x = 1.5 - t; y = 2.0/3 + t; label = 1;}
        border fr9(t = 0, -1.0/60){x = 7.0/6 + 7 * t; y = 1 + 20 * t; label = 3;}
        border fr10(t = 1.05, 0){x = t; y = 2.0/3; label = 3;}
        border fr11(t = 2.0/3, 1.0/3){x = 0; y = t; label = 2;}

        Th= buildmesh(fr0(5 * nn) + fr1(2 * nn) + fr2(nn) + fr3(nn) + fr4(nn) + fr5(2 * nn) 
                    + fr6(nn) + fr7(nn) + fr8(nn) + fr9(2 * nn) + fr10(5 * nn) + fr11(2 * nn));
    }
}
else if (config == 2)
{
    if (testcase == 1)                                                          // short cantilever test case
    {

        border L11(t = 0.0, 0.5){x = t; y = 0.0; label = 3;}
        border L21(t = 0.0, 0.45){x = 0.5; y = t; label = 3;}
        border L22(t = 0.45, 0.55){x = 0.5; y = t; label = 2;}
        border L23(t = 0.55, 1.0){x = 0.5; y = t; label = 3;}
        border L31(t = 0.5, 0){x = t; y = 1.0; label = 3;}
        border L41(t = 1.0, 0.9){x = 0.0; y = t; label = 1;}
        border L42(t = 0.9, 0.1){x = 0.0; y = t; label = 3;}
        border L43(t = 0.1, 0.0){x = 0.0; y = t; label = 1;}

        Th = buildmesh(L11(5 * nn) + L21(5 * nn) + L22(1 * nn) + L23(5 * nn) + L31(5 * nn) + L41(1 * nn) + L42(8 * nn) + L43(1 * nn)
            );
    }
    else if (testcase == 2)                                                     // long cantilever test case
    {
        real r = 0.15;                                                          // radius of holes

        border L11(t = -1.0, 1.0){x = t; y = 0.0; label = 3;}
        border L21(t = 0.0, 0.45){x = 1.0; y = t; label = 3;}
        border L22(t = 0.45, 0.55){x = 1.0; y = t; label = 2;}
        border L23(t = 0.55, 1.0){x = 1.0; y = t; label = 3;}
        border L31(t = 1.0, -1.0){x = t; y = 1.0; label = 3;}
        border L41(t = 1.0, 0.9){x = -1.0; y = t; label = 1;}
        border L42(t = 0.9, 0.1){x = -1.0; y = t; label = 3;}
        border L43(t = 0.1, 0.0){x = -1.0; y = t; label = 1;}

        
        border C11(t = 0, 2 * pi){x = -0.6 + r * cos(t); y = 0.22 + r * sin(t); label = 3;}
        border C12(t = 0, 2 * pi){x = 0.2 + r * cos(t); y = 0.22 + r * sin(t); label = 3;}
        border C21(t = 0, 2 * pi){x = -0.2 + r * cos(t); y = 0.5 + r * sin(t); label = 3;}
        border C22(t = 0, 2 * pi){x = 0.6 + r * cos(t); y = 0.5 + r * sin(t); label = 3;}
        border C31(t = 0, 2 * pi){x = -0.6 + r * cos(t); y = 0.78 + r * sin(t); label = 3;}
        border C32(t = 0, 2 * pi){x = 0.2 + r * cos(t); y = 0.78 + r * sin(t); label = 3;}

        Th = buildmesh(L11(20 * nn) + L21(5 * nn) + L22(1 * nn) + L23(5 * nn) + L31(20 * nn) + L41(1 * nn) + L42(8 * nn) + L43(1 * nn)
            + C11(-10 * nn) + C12(-10 * nn)  + C21(-10 * nn) + C22(-10 * nn)
             + C31(-10 * nn) + C32(-10 * nn)
            );
    }
    else if (testcase == 3)                                                     // cantilever test case with 2 surface loads
    {
        real r = 0.15;                                                          // radius of holes

        border L11(t = 0.0, 1.0){x = t; y = 0.0; label = 3;}
        border L21(t = 0.0, 0.1){x = 1.0; y = t; label = 2;}
        border L22(t = 0.1, 0.9){x = 1.0; y = t; label = 3;}
        border L23(t = 0.9, 1.0){x = 1.0; y = t; label = 4;}
        border L31(t = 1.0, 0.0){x = t; y = 1.0; label = 3;}
        border L41(t = 1.0, 0.9){x = 0.0; y = t; label = 1;}
        border L42(t = 0.9, 0.1){x = 0.0; y = t; label = 3;}
        border L43(t = 0.1, 0.0){x = 0.0; y = t; label = 1;}

        
        border C11(t = 0, 2 * pi){x = 0.5 + r * cos(t); y = 0.22 + r * sin(t); label = 3;}
        border C21(t = 0, 2 * pi){x = 0.75 + r * cos(t); y = 0.5 + r * sin(t); label = 3;}
        border C31(t = 0, 2 * pi){x = 0.5 + r * cos(t); y = 0.78 + r * sin(t); label = 3;}

        Th = buildmesh(L11(10 * nn) + L21(1 * nn) + L22(8 * nn) + L23(1 * nn) + L31(10 * nn) + L41(1 * nn) + L42(8 * nn) + L43(1 * nn)
            + C11(-10 * nn) + C31(-10 * nn) //+ C21(-10 * nn)
            );
    }
    else if (testcase == 4)                                                     // bridge test case
    {
        real r = 0.25;

        border L11(t = -1.0, -0.9){x = t; y = 0; label = 1;}
        border L12(t = -0.9, -0.2){x = t; y = 0; label = 3;}
        border L13(t = -0.2, 0.2){x = t; y = 0; label = 2;}
        border L14(t = 0.2, 0.9){x = t; y = 0; label = 3;}
        border L15(t = 0.9, 1.0){x = t; y = 0; label = 1;}
        
        border L21(t = 0, 1.2){x = 1.0; y = t; label = 3;}
        border L22(t = 1.0, -1.0){x = t; y = 1.2; label = 3;}
        border L23(t = 1.2, 0){x = -1.0; y = t; label = 3;}
        
        border C10(t = 0, 2 * pi){x = -0.6 + r * cos(t); y = 0.4 + r * sin(t); label = 3;}
        border C11(t = 0, 2 * pi){x = r * cos(t); y = 0.8 + r * sin(t); label = 3;}
        border C12(t = 0, 2 * pi){x = 0.6 + r * cos(t); y = 0.4 + r * sin(t); label = 3;}

        Th = buildmesh(L11(1 * nn) + L12(7 * nn) + L13(4 * nn) + L14(7 * nn) + L15(1 * nn) + L21(12 * nn) + L22(20 * nn) + L23(12 * nn) 
            + C10(-15 * nn) + C11(-15 * nn) + C12(-15 * nn) 
            );
    }
    else if (testcase == 5)                                                    // mast test case
    {
        real r = 0.1;

        border L11(t = 0.4, -0.4){x = t; y = 1.2; label = 3;}
        border L21(t = 1.2, 0.8){x = -0.4; y = t; label = 3;}
        border L31(t = -0.4, -0.2){x = t; y = 0.8; label = 2;}
        // border L32(t = -0.3, -0.2){x = t; y = 0.8; label = 3;}
        border L41(t = 0.8, 0.0){x = -0.2; y = t; label = 3;}
        border L51(t = -0.2, -0.1){x = t; y = 0.0; label = 1;}
        border L52(t = 0, 0.2){x = -0.1; y = t; label = 3;}
        border L53(t = 0, 0.2){x = -0.1 + t; y = 0.2; label = 3;}
        border L54(t = 0, 0.2){x = 0.1; y = 0.2 - t; label = 3;}
        // border C52(t = pi, 0){x = 0.1 * cos(t); y = 0.1 * sin(t); label = 3;}
        border L55(t = 0.1, 0.2){x = t; y = 0.0; label = 1;}
        border L42(t = 0.0, 0.8){x = 0.2; y = t; label = 3;}
        // border L33(t = 0.2, 0.3){x = t; y = 0.8; label = 3;}
        border L34(t = 0.2, 0.4){x = t; y = 0.8; label = 2;}
        border L22(t = 0.8, 1.2){x = 0.4; y = t; label = 3;}

        //border C1(t = 0, 2 * pi){x = -0.25 + r * cos(t); y = 0.95 + r * sin(t); label = 3;}
        // border C2(t = 0, 2 * pi){x = r * cos(t); y = 0.95 + r * sin(t); label = 3;}
        // border C3(t = 0, 2 * pi){x = 0.25 + r * cos(t); y = 0.95 + r * sin(t); label = 3;}
        
        border L61(t = 0, 0.2){x = -0.2; y = 0.85 + t; label = 3;}
        border L62(t = 0, 0.1){x = -0.2 - t; y = 1.05 - t; label = 3;}
        border L63(t = 0, 0.1){x = -0.3 + t; y = 0.95 - t; label = 3;}

        border L71(t = 0, 0.2){x = 0.2; y = 1.05 - t; label = 3;}
        border L72(t = 0, 0.1){x = 0.2 + t; y = 0.85 + t; label = 3;}
        border L73(t = 0, 0.1){x = 0.3 - t; y = 0.95 + t; label = 3;}

        border L81(t = 0, 0.2){x = -0.1 + t; y = 0.85; label = 3;}
        border L82(t = 0, 0.2){x = 0.1; y = 0.85 + t; label = 3;}
        border L83(t = 0, 0.2){x = 0.1 - t; y = 1.05; label = 3;}
        border L84(t = 0, 0.2){x = -0.1; y = 1.05 - t; label = 3;}

        Th = buildmesh(L11(8 * nn) + L21(4 * nn) + L31(2 * nn) + L41(8 * nn) 
                + L51(nn) + L52(2 * nn) + L53(2 * nn) + L54(2 * nn) + L55(nn) + L42(8 * nn) + L34(2 * nn) + L22(4 * nn)
                + L61(-2 * nn) + L62(-2 * nn) + L63(-2 * nn)
                + L71(-2 * nn) + L72(-2 * nn) + L73(-2 * nn)
                + L81(-2 * nn) + L82(-2 * nn) + L83(-2 * nn) + L84(-2 * nn) 
                );
    }
    else if(testcase == 6)                                                      // L-beam test case
    {
        real r = 0.1;

        border L1(t = 0.0, 1.0){x = t; y = 0.0; label = 3;}
        border L21(t = 0.0, 0.18){x = 1.0; y = t; label = 3;}
        border L22(t = 0.18, 0.22){x = 1.0; y = t; label = 2;}
        border L23(t = 0.22, 0.4){x = 1.0; y = t; label = 3;}
        border L3(t = 1.0, 0.4){x = t; y = 0.4; label = 3;}
        border L4(t = 0.4, 1.0){x = 0.4; y = t; label = 3;}
        border L51(t = 0.4, 0.3){x = t; y = 1.0; label = 1;}
        border L52(t = 0.3, 0.1){x = t; y = 1.0; label = 3;}
        border L53(t = 0.1, 0.0){x = t; y = 1.0; label = 1;}
        border L6(t = 1.0, 0.0){x = 0.0; y = t; label = 3;}

        border C71(t = 0, 2 * pi){x = 0.2 + r * cos(t); y = 0.2 + r * sin(t); label = 3;}
        border C72(t = 0, 2 * pi){x = 0.5 + r * cos(t); y = 0.2 + r * sin(t); label = 3;}
        border C73(t = 0, 2 * pi){x = 0.8 + r * cos(t); y = 0.2 + r * sin(t); label = 3;}

        Th = buildmesh(L1(10 * nn) + L21(2 * nn) + L22(1 * nn) + L23(2 * nn) + L3(6 * nn) + L4(6 * nn)
                + L51(1 * nn) + L52(2 * nn) + L53(1 * nn) + L6(10 * nn)
                + C71(-7 * nn) + C72(-7 * nn) + C73(-7 * nn)
                );
    }
    else if(testcase == 7)                                                      // optimal radiator (P.209 Conception optimale de structures)
    {
        real r = 0.15;

        border L11(t = 0.0, 0.1){x = t; y = 0.0; label = 1;}
        border L12(t = 0.1, 0.9){x = t; y = 0.0; label = 3;}
        border L13(t = 0.9, 1.0){x = t; y = 0.0; label = 1;}
        border L2(t = 0, 1.0){x = 1.0; y = t; label = 3;}
        border L3(t = 1.0, 0.0){x = t; y = 1.0; label = 2;}
        border L4(t = 1.0, 0.0){x = 0.0; y = t; label = 3;}

        border C51(t = 0, 2 * pi){x = 0.3 + r * cos(t); y = 0.5+ r * sin(t); label = 3;}
        border C52(t = 0, 2 * pi){x = 0.7 + r * cos(t); y = 0.5 + r * sin(t); label = 3;}

        Th = buildmesh(L11(1 * nn) + L12(8 * nn) + L13(1 * nn) + L2(10 * nn) + L3(10 * nn) + L4(10 * nn)
                + C51(-10 * nn) + C52(-10 * nn)
                );
    }
}

savemesh(Th, "meshes/" + meshname + ".mesh");
plot(Th);
